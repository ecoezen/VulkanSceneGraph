
find_package(Vulkan ${Vulkan_MIN_VERSION} REQUIRED )
find_package(Threads REQUIRED)

has_cxx_atomic_intrinsic(HAS_ATOMIC)

if(NOT HAS_ATOMIC)
    find_library(CXX_ATOMIC_LIBRARIES NAMES atomic atomic.so.1 libatomic.so.1 REQUIRED)
endif()



# ShaderCompiler setup
if (VSG_SUPPORTS_ShaderCompiler)
    # Try glslang 15 first
    set(GLSLANG_MIN_VERSION "15" CACHE STRING "Minimum glslang version required")
    find_package(glslang ${GLSLANG_MIN_VERSION} CONFIG QUIET)

    if (NOT glslang_FOUND)
        # Fallback to glslang 14
        set(GLSLANG_MIN_VERSION "14")
        find_package(glslang ${GLSLANG_MIN_VERSION} CONFIG QUIET)
    endif()

    if (NOT glslang_FOUND)
        message(WARNING "glslang not found. Disabling ShaderCompiler and ShaderOptimizer.")
        set(VSG_SUPPORTS_ShaderCompiler OFF CACHE BOOL "" FORCE)
        set(VSG_SUPPORTS_ShaderOptimizer OFF CACHE BOOL "" FORCE)
    else()

        set(VSG_SUPPORTS_ShaderCompiler_LIBS glslang::glslang 
                                             glslang::glslang-default-resource-limits 
                                             glslang::SPIRV
                                             CACHE INTERNAL "glslang libraries")

        find_package(SPIRV-Tools-opt CONFIG QUIET)
        if (NOT SPIRV-Tools-opt_FOUND)
            message(WARNING "SPIRV-Tools-opt not found. Disabling VSG_SUPPORTS_ShaderOptimizer.")
            set(VSG_SUPPORTS_ShaderOptimizer OFF CACHE BOOL "" FORCE)
        else()
            set(VSG_SUPPORTS_ShaderOptimizer_LIBS SPIRV-Tools-opt CACHE INTERNAL "SPIRV-Tools-opt libraries")
        endif()
    endif()
endif()


if (VSG_SUPPORTS_Windowing)

    set(VSG_SUPPORTS_Windowing_LIBS "")
    set(VSG_SUPPORTS_Windowing_HEADERS "")
    set(VSG_SUPPORTS_Windowing_SOURCES "")


    if (ANDROID)

        set(FIND_DEPENDENCY_WINDOWING "")
        find_library(AndroidLib android)
        list(APPEND VSG_SUPPORTS_Windowing_LIBS ${AndroidLib})
        if(CMAKE_SYSTEM_VERSION GREATER 24)
            find_library(AndroidNativeWindowLib nativewindow)
            list(APPEND VSG_SUPPORTS_Windowing_LIBS ${AndroidNativeWindowLib})
        endif()

        
        set(VSG_SUPPORTS_Windowing_HEADERS ${VSG_SOURCE_DIR}/include/vsg/platform/android/Android_Window.h)
        set(VSG_SUPPORTS_Windowing_SOURCES platform/android/Android_Window.cpp)
    elseif (WIN32)
        set(VSG_SUPPORTS_Windowing_SOURCES platform/win32/Win32_Window.cpp)
    elseif (IOS OR APPLE)

        set(FIND_DEPENDENCY_WINDOWING "find_library(COCOA_LIBRARY Cocoa)\nfind_library(QUARTZCORE_LIBRARY QuartzCore)\n")
        find_library(COCOA_LIBRARY Cocoa)
        find_library(QUARTZCORE_LIBRARY QuartzCore)
        set(VSG_SUPPORTS_Windowing_LIBS ${COCOA_LIBRARY} ${QUARTZCORE_LIBRARY})
        
        if(IOS)
            set(VSG_SUPPORTS_Windowing_HEADERS
                ${VSG_SOURCE_DIR}/include/vsg/platform/ios/iOS_Window.h
                ${VSG_SOURCE_DIR}/include/vsg/platform/ios/iOS_ViewController.h
            )
            set(VSG_SUPPORTS_Windowing_SOURCES
                platform/ios/iOS_Window.mm
                platform/ios/iOS_ViewController.mm
            )
        elseif(APPLE)
            set(VSG_SUPPORTS_Windowing_SOURCES platform/macos/MacOS_Window.mm)
        endif()
    else()

        set(FIND_DEPENDENCY_WINDOWING "find_package(PkgConfig REQUIRED)\npkg_check_modules(xcb REQUIRED IMPORTED_TARGET xcb)\n")
        # just use Xcb for native windowing
        find_package(PkgConfig REQUIRED)
        pkg_check_modules(xcb REQUIRED IMPORTED_TARGET xcb)
        set(VSG_SUPPORTS_Windowing_LIBS PkgConfig::xcb)

        set(VSG_SUPPORTS_Windowing_SOURCES platform/xcb/Xcb_Window.cpp)
    endif()


    set(VSG_SUPPORTS_Windowing_LIBS ${VSG_SUPPORTS_Windowing_LIBS} CACHE INTERNAL "Windowing libraries")
endif()

set(VSG_GENERATED_DIR "${VSG_BINARY_DIR}/generated" CACHE INTERNAL "Generated directory for VSG project")

configure_file("${VSG_MAINTAINER_CMAKE_DIR}/Version.h.in" "${VSG_GENERATED_DIR}/include/vsg/core/Version.h")

# collect all the headers in the source directory
file(GLOB_RECURSE VSG_HEADERS ${VSG_SOURCE_DIR}/include/vsg/*.h)

if (NOT (${VSG_SOURCE_DIR} STREQUAL ${VSG_BINARY_DIR}))
        file(GLOB_RECURSE VSG_AUTOGENERATED_HEADERS ${VSG_GENERATED_DIR}/include/vsg/*.h)
endif()

# set up the source files explicitly.
set(VSG_SOURCES

    core/Allocator.cpp
    core/IntrusiveAllocator.cpp
    core/Auxiliary.cpp
    core/ConstVisitor.cpp
    core/Data.cpp
    core/External.cpp
    core/MemorySlots.cpp
    core/Object.cpp
    core/Objects.cpp
    core/Visitor.cpp
    core/Version.cpp

    maths/common.cpp
    maths/maths_transform.cpp

    nodes/Group.cpp
    nodes/Geometry.cpp
    nodes/Node.cpp
    nodes/QuadGroup.cpp
    nodes/CullGroup.cpp
    nodes/CullNode.cpp
    nodes/LOD.cpp
    nodes/PagedLOD.cpp
    nodes/AbsoluteTransform.cpp
    nodes/MatrixTransform.cpp
    nodes/CoordinateFrame.cpp
    nodes/Transform.cpp
    nodes/VertexDraw.cpp
    nodes/VertexIndexDraw.cpp
    nodes/DepthSorted.cpp
    nodes/Layer.cpp
    nodes/Bin.cpp
    nodes/Switch.cpp
    nodes/StateGroup.cpp
    nodes/TileDatabase.cpp
    nodes/InstrumentationNode.cpp
    nodes/RegionOfInterest.cpp

    lighting/Light.cpp
    lighting/AmbientLight.cpp
    lighting/DirectionalLight.cpp
    lighting/PointLight.cpp
    lighting/SpotLight.cpp
    lighting/ShadowSettings.cpp
    lighting/HardShadows.cpp
    lighting/SoftShadows.cpp
    lighting/PercentageCloserSoftShadows.cpp

    commands/BindIndexBuffer.cpp
    commands/BindVertexBuffers.cpp
    commands/Commands.cpp
    commands/BlitImage.cpp
    commands/CopyImage.cpp
    commands/CopyImageToBuffer.cpp
    commands/CopyAndReleaseBuffer.cpp
    commands/CopyAndReleaseImage.cpp
    commands/ClearAttachments.cpp
    commands/ClearImage.cpp
    commands/PipelineBarrier.cpp
    commands/Event.cpp
    commands/NextSubPass.cpp
    commands/Dispatch.cpp
    commands/Draw.cpp
    commands/DrawIndirect.cpp
    commands/DrawIndexed.cpp
    commands/DrawIndexedIndirect.cpp
    commands/SetDepthBias.cpp
    commands/SetLineWidth.cpp
    commands/SetScissor.cpp
    commands/SetViewport.cpp
    commands/SetPrimitiveTopology.cpp
    commands/ResolveImage.cpp
    commands/ResetQueryPool.cpp
    commands/WriteTimestamp.cpp
    commands/BeginQuery.cpp
    commands/EndQuery.cpp
    commands/CopyQueryPoolResults.cpp
    commands/ExecuteCommands.cpp
    commands/CopyImageViewToWindow.cpp

    state/ArrayState.cpp
    state/BindDescriptorSet.cpp
    state/Buffer.cpp
    state/BufferInfo.cpp
    state/BufferView.cpp
    state/ComputePipeline.cpp
    state/DescriptorSet.cpp
    state/GraphicsPipeline.cpp
    state/Descriptor.cpp
    state/DescriptorBuffer.cpp
    state/DescriptorImage.cpp
    state/DescriptorTexelBufferView.cpp
    state/DescriptorSetLayout.cpp
    state/ShaderModule.cpp
    state/ShaderStage.cpp
    state/PipelineLayout.cpp
    state/Sampler.cpp
    state/ResourceHints.cpp
    state/StateCommand.cpp
    state/StateSwitch.cpp
    state/Image.cpp
    state/ImageInfo.cpp
    state/ImageView.cpp
    state/VertexInputState.cpp
    state/InputAssemblyState.cpp
    state/TessellationState.cpp
    state/ViewportState.cpp
    state/RasterizationState.cpp
    state/MultisampleState.cpp
    state/DepthStencilState.cpp
    state/ColorBlendState.cpp
    state/DynamicState.cpp
    state/ViewDependentState.cpp
    state/QueryPool.cpp
    state/PushConstants.cpp

    io/convert_utf.cpp
    io/FileSystem.cpp
    io/AsciiInput.cpp
    io/DatabasePager.cpp
    io/AsciiOutput.cpp
    io/BinaryInput.cpp
    io/BinaryOutput.cpp
    io/Input.cpp
    io/Logger.cpp
    io/Output.cpp
    io/Options.cpp
    io/ObjectFactory.cpp
    io/Path.cpp
    io/ReaderWriter.cpp
    io/VSG.cpp
    io/glsl.cpp
    io/json.cpp
    io/JSONParser.cpp
    io/spirv.cpp
    io/tile.cpp
    io/txt.cpp
    io/read.cpp
    io/write.cpp
    io/mem_stream.cpp

    text/CpuLayoutTechnique.cpp
    text/GpuLayoutTechnique.cpp
    text/Font.cpp
    text/StandardLayout.cpp
    text/Text.cpp
    text/TextGroup.cpp

    threading/Affinity.cpp
    threading/OperationThreads.cpp
    threading/DeleteQueue.cpp

    app/Camera.cpp
    app/CompileManager.cpp
    app/EllipsoidModel.cpp
    app/Viewer.cpp
    app/Window.cpp
    app/WindowAdapter.cpp
    app/WindowTraits.cpp
    app/Trackball.cpp
    app/CommandGraph.cpp
    app/SecondaryCommandGraph.cpp
    app/RenderGraph.cpp
    app/Presentation.cpp
    app/RecordAndSubmitTask.cpp
    app/TransferTask.cpp
    app/WindowResizeHandler.cpp
    app/View.cpp
    app/ViewMatrix.cpp
    app/ProjectionMatrix.cpp
    app/UpdateOperations.cpp
    app/RecordTraversal.cpp
    app/CompileTraversal.cpp

    raytracing/AccelerationGeometry.cpp
    raytracing/AccelerationStructure.cpp
    raytracing/BottomLevelAccelerationStructure.cpp
    raytracing/BuildAccelerationStructureTraversal.cpp
    raytracing/DescriptorAccelerationStructure.cpp
    raytracing/RayTracingPipeline.cpp
    raytracing/RayTracingShaderGroup.cpp
    raytracing/TopLevelAccelerationStructure.cpp
    raytracing/TraceRays.cpp

    meshshaders/DrawMeshTasks.cpp
    meshshaders/DrawMeshTasksIndirect.cpp
    meshshaders/DrawMeshTasksIndirectCount.cpp

    animation/Animation.cpp
    animation/AnimationGroup.cpp
    animation/AnimationManager.cpp
    animation/CameraAnimationHandler.cpp
    animation/FindAnimations.cpp
    animation/Joint.cpp
    animation/JointSampler.cpp
    animation/MorphSampler.cpp
    animation/CameraSampler.cpp
    animation/TransformSampler.cpp

    ui/UIEvent.cpp
    ui/ApplicationEvent.cpp
    ui/KeyEvent.cpp
    ui/TouchEvent.cpp
    ui/PointerEvent.cpp
    ui/ScrollWheelEvent.cpp
    ui/WindowEvent.cpp
    ui/RecordEvents.cpp
    ui/CollectEvents.cpp
    ui/ShiftEventTime.cpp
    ui/PlayEvents.cpp
    ui/PrintEvents.cpp
    ui/Keyboard.cpp

    vk/CommandBuffer.cpp
    vk/CommandPool.cpp
    vk/Context.cpp
    vk/DescriptorPool.cpp
    vk/DescriptorPools.cpp
    vk/Device.cpp
    vk/DeviceFeatures.cpp
    vk/DeviceMemory.cpp
    vk/DeviceExtensions.cpp
    vk/Fence.cpp
    vk/Framebuffer.cpp
    vk/Instance.cpp
    vk/InstanceExtensions.cpp
    vk/MemoryBufferPools.cpp
    vk/PhysicalDevice.cpp
    vk/Queue.cpp
    vk/RenderPass.cpp
    vk/Semaphore.cpp
    vk/Surface.cpp
    vk/Swapchain.cpp
    vk/ResourceRequirements.cpp
    vk/State.cpp

    utils/CommandLine.cpp
    utils/CoordinateSpace.cpp
    utils/Builder.cpp
    utils/SharedObjects.cpp
    utils/ShaderSet.cpp
    utils/GraphicsPipelineConfigurator.cpp
    utils/ShaderCompiler.cpp
    utils/ComputeBounds.cpp
    utils/Intersector.cpp
    utils/Instrumentation.cpp
    utils/GpuAnnotation.cpp
    utils/LineSegmentIntersector.cpp
    utils/PolytopeIntersector.cpp
    utils/LoadPagedLOD.cpp
    utils/FindDynamicObjects.cpp
    utils/PropagateDynamicObjects.cpp
    utils/Profiler.cpp
)





add_library(vsg INTERFACE) 
add_library(vsg::vsg ALIAS vsg) # create an alias for the vsg target



if(NOT VSG_SHARED AND NOT BUILD_SHARED_LIBS)
    set(EXCLUDE_IF_NOT_VSG_SHARED EXCLUDE_FROM_ALL)
endif()

if(NOT VSG_STATIC)
    set(EXCLUDE_IF_NOT_VSG_STATIC EXCLUDE_FROM_ALL)
endif()


add_library(vsg_shared SHARED ${EXCLUDE_IF_NOT_VSG_SHARED})
add_library(vsg::vsg-shared ALIAS vsg_shared)
set_target_properties(vsg_shared PROPERTIES
                                    VERSION ${VSG_VERSION_MAJOR}.${VSG_VERSION_MINOR}.${VSG_VERSION_PATCH}
                                    SOVERSION ${VSG_SOVERSION}
                                    POSITION_INDEPENDENT_CODE ON
                                    CXX_STANDARD 17
                                    FOLDER "VulkanSceneGraph"
                                    OUTPUT_NAME vsg # convention for shared libraries
                                    EXPORT_NAME vsg-shared
                                )

include(GenerateExportHeader)
generate_export_header(vsg_shared
    EXPORT_FILE_NAME ${VSG_GENERATED_DIR}/include/vsg/core/Export.h
    EXPORT_MACRO_NAME VSG_DECLSPEC
    BASE_NAME VSG
)



add_library(vsg_static STATIC ${EXCLUDE_IF_NOT_VSG_STATIC})
add_library(vsg::vsg-static ALIAS vsg_static)

set_target_properties(vsg_static PROPERTIES
                                    VERSION ${VSG_VERSION_MAJOR}.${VSG_VERSION_MINOR}.${VSG_VERSION_PATCH}
                                    SOVERSION ${VSG_SOVERSION}
                                    POSITION_INDEPENDENT_CODE ON
                                    CXX_STANDARD 17
                                    FOLDER "VulkanSceneGraph"
                                    OUTPUT_NAME libvsg # convention for static libraries
                                    EXPORT_NAME vsg-static
                                    COMPILE_FLAGS -DVSG_STATIC_DEFINE # to prevent export macros from being defined in static library
                                    )



# for out of source builds collect all the auto-generated headers in the build directory




foreach(lib vsg_shared vsg_static)
    if(TARGET ${lib})

    target_sources(${lib} PRIVATE
                            ${VSG_HEADERS} ${VSG_SOURCES}
                            ${VSG_SUPPORTS_Windowing_HEADERS} ${VSG_SUPPORTS_Windowing_SOURCES}
                            ${VSG_AUTOGENERATED_HEADERS}
                        )



        target_include_directories(${lib} PUBLIC
                                                $<BUILD_INTERFACE:${VSG_SOURCE_DIR}/include>
                                                $<BUILD_INTERFACE:${VSG_GENERATED_DIR}/include>
                                                $<INSTALL_INTERFACE:include>
                                                )

                                                

        target_link_libraries(${lib}
            PUBLIC Vulkan::Vulkan Threads::Threads
            PRIVATE ${VSG_SUPPORTS_ShaderCompiler_LIBS}
                    ${VSG_SUPPORTS_ShaderOptimizer_LIBS}
                    ${VSG_SUPPORTS_Windowing_LIBS}
                    ${CXX_ATOMIC_LIBRARIES}
        )

        target_compile_options(${lib} PRIVATE
            $<$<AND:$<CXX_COMPILER_ID:MSVC>,$<BOOL:${ENABLE_MP_FLAG}>>:/MP>
            $<$<CXX_COMPILER_ID:MSVC>:/bigobj>
            $<$<CXX_COMPILER_ID:MSVC>:/wd4251>

        )



        target_compile_definitions(${lib} PUBLIC
            $<$<AND:$<CXX_COMPILER_ID:MSVC>,$<BOOL:${DISABLE_CHECKED_ITERATORS}>,$<CONFIG:Debug>>:_ITERATOR_DEBUG_LEVEL=0>
            PRIVATE ${EXTRA_DEFINES}
        )


    endif()


endforeach()

set(VSG_INSTALL_TARGETS vsg) # add to install list : vsg is always valid as interface target
if(VSG_SHARED OR BUILD_SHARED_LIBS) # relate vsg interface target with vsg_shared library
    target_link_libraries(vsg INTERFACE vsg_shared)
    list(APPEND VSG_INSTALL_TARGETS vsg_shared)
elseif(VSG_STATIC) # relate vsg interface target with vsg_static library
    target_link_libraries(vsg INTERFACE vsg_static)
    list(APPEND VSG_INSTALL_TARGETS vsg_static)
else() # someone messed up, so there is no built target, throw an error
    message(FATAL_ERROR "VSG_STATIC and VSG_SHARED are both OFF, please set one of them to ON.")
endif()



set_property(GLOBAL PROPERTY USE_FOLDERS ON)
# Automatically group source files by directory structure
source_group(TREE "${VSG_SOURCE_DIR}/include/vsg" PREFIX "Header Files" FILES ${VSG_HEADERS} ${VSG_SUPPORTS_Windowing_HEADERS})
source_group(TREE "${VSG_GENERATED_DIR}/include/vsg" PREFIX "Generated" FILES ${VSG_AUTOGENERATED_HEADERS})
source_group(TREE "${VSG_SOURCE_DIR}/src/vsg" PREFIX "Source Files" FILES ${VSG_SOURCES} ${VSG_SUPPORTS_Windowing_SOURCES})



if(NOT VSG_SKIP_INSTALL)

    include(GNUInstallDirs)
            message(STATUS "Installing docs to ${CMAKE_INSTALL_DOCDIR}")

    install(TARGETS ${VSG_INSTALL_TARGETS}
            EXPORT ${PROJECT_NAME}Targets
            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} 
            INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}

        )

    install(DIRECTORY 
                ${VSG_SOURCE_DIR}/include/${PROJECT_NAME}/
                ${VSG_GENERATED_DIR}/include/${PROJECT_NAME}/
            DESTINATION 
                ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
                )


    install(EXPORT ${PROJECT_NAME}Targets
            FILE ${PROJECT_NAME}Targets.cmake
            NAMESPACE ${PROJECT_NAME}::
            DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
            )


    # install licence(s) and docs
    install(DIRECTORY ${VSG_SOURCE_DIR}/docs/
            DESTINATION ${CMAKE_INSTALL_DOCDIR}
            )


    install(FILES ${VSG_SOURCE_DIR}/LICENSE.md
                ${VSG_SOURCE_DIR}/LICENSE.Vulkan-Headers.md
            DESTINATION ${CMAKE_INSTALL_DOCDIR}
    )


    include(CMakePackageConfigHelpers)
    write_basic_package_version_file(
                                    ${VSG_GENERATED_DIR}/cmake/${PROJECT_NAME}ConfigVersion.cmake
                                    VERSION ${PROJECT_VERSION}
                                    COMPATIBILITY SameMajorVersion
                                )

    configure_package_config_file(
                                ${VSG_MAINTAINER_CMAKE_DIR}/${PROJECT_NAME}Config.cmake.in
                                ${VSG_GENERATED_DIR}/cmake/${PROJECT_NAME}Config.cmake
                                INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
                                )

    install(DIRECTORY
                ${VSG_GENERATED_DIR}/cmake/
                ${VSG_SOURCE_DIR}/cmake/${PROJECT_NAME}/
            DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
            )



    # get the install manifest file up to this point to be used by the uninstall script
    # install_manifest.txt and uninstall.cmake script are deliberately excluded from this to be written
    # install_manifest.txt file in order to avoid cyclic dependencies in the uninstall process.
    # they are still included in original install_manifest.txt in VSG_BINARY_DIR.
    install(CODE "
        string(REPLACE \";\" \"\\n\" VSG_CMAKE_INSTALL_MANIFEST_CONTENT \"\$\{CMAKE_INSTALL_MANIFEST_FILES\}\")
        file(WRITE \"${VSG_BINARY_DIR}/tmp/install_manifest.txt\" \"\$\{VSG_CMAKE_INSTALL_MANIFEST_CONTENT\}\")
    ")

    install(FILES ${VSG_BINARY_DIR}/tmp/install_manifest.txt 
                ${VSG_CMAKE_DIR}/uninstall.cmake
            DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
            )

    vsg_add_target_uninstall()


endif(NOT VSG_SKIP_INSTALL)
